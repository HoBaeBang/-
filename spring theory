스프링의 이론에 대해 생각해보자
2021-04-27
MVC라는 것은 무엇인가?
  MVC : Model, View, Controller를 묶어서 MVC라고 통칭한다.
  MVC템플릿 엔진의 경우 ex)
    웹브라우저에서 localhost:8080/hello-mvc라는 입력이 들어온다
    톰켓 내장 서버 -> 스프링 컨테이너 -> 컨트롤러 -> 뷰리졸버
    ->뷰리졸버가 HTMl변환을 한후 -> 웹브라우저로 넘겨줌
  MVC를 이용할때 위와 같은 느낌으로 실행이 된다는 것을 알아두자.
  
API를 이용한 방법
  뷰리졸버를 사용하지 않고 대신에 HttpMessageConverter를 사용할 수 있다.
  @RequestBody를 사용하면 뷰리졸버를 사용하지 않고
  대신에 HTTP의 BODY에 문자 내용을 직접 반환한다(HTML BODY TAG를 말하는것이 아님)
  @RequestBody를 사용하고, 객체를 반환하면 객체가 JSON으로 변환된다.
 
@ResponseBody 를 사용
  HTTP의 BODY에 문자 내용을 직접 반환
  viewResolver 대신에 HttpMessageConverter 가 동작
  기본 문자처리: StringHttpMessageConverter
  기본 객체처리: MappingJackson2HttpMessageConverter
  byte 처리 등등 기타 여러 HttpMessageConverter가 기본으로 등록되어 있음
    참고: 클라이언트의 HTTP Accept 해더와 서버의 컨트롤러 반환 타입 정보 둘을 조합해서
    HttpMessageConverter 가 선택된다.

2021-04-28
  코드로 보면서 기본적인 프로그램을 만들어보자.
  
  기본개념 추가 공부 
  IOC (inversion of Controll) : 제어의 역전
  주도권이 스프링에게 있다.
  내가 오브젝트를 직접 뉴를 해서 힙이라는 메모리 공간에 올리게 되면
  ex) public void exam{
            Human person = new Human();
      }
      public void make{
            Human person = new human();
      }
      
 Heap Memory
  |-------|
  | Human | -> Exam에서 만든 person이 이메모리를 가르키고 이때 person은 new를 만든 해당 메서드 exam 안에서 관리하게 된다.
  |-------|
  | Human | -> make에서 만든 person이 해당 메모리를 가르키고 이때 person은 new를 만든 해당 메서드 make 안에서 관리하게 된다.
  |-------|
  |       |
  |-------|
  각각의 메모리 주소를 메서드가 관리하게 되는데 이렇게되면 공유하는게 힘들어진다.
   (두개의 메서드가 있는데 각각의 메서드가 서로 로브젝트를 관리하게 되고 메서드가 끝나면 
   메모리에서 지워지기 때문에 다른 메모리에서 참조가 힘들어진다.)
    ->exam에서 만든 Human의 person을 make에서 사용하고 싶을경우 힘들어진다
  
  위와 같은이유로 때문에 스프링이 IOC를 해주게 되는데
  스프링이 우리가 들고있는 수많은 오브젝트들을 
  ex) 내가 Dog, Cat, Rabbit과 같은 오브젝트를 만들었다면
  Dog, Cat, Rabbit과같은 오브젝트들을 스프링이 스켄해서 읽어서 자기가 객체를 heap에 띄워준다
  
  -----------------------------------------------------
  Class - 설계도
  Object - 실체화가 가능한 것 (추상적이지 않은것)
  Instance - 실체화된 것
  ex) 가구(실체화불가(추상적)) - 의자(Object(실체화 가능)) -> 이런것들이 Object로 존제하다가 실체화(실제로 만들어지게)가 되면 ->Instance가된다.
                             - 침대(Object(실체화 가능)) ->  
  -----------------------------------------------------
  
  스프링은 Di를 지원한다
  DI(Dependency Ijection) : 의존성 주입
  스프링을 이용해서 IOC를 하지 않았을때는 내가 뉴를 해서 객체주소를 원하는곳에 해서 개발자가 관리했다면
  이제는 스프링이 스켄을 해서 오브젝트를 메모리에 띄워주기 때문에 스프링이 관리하는 객체를 내가 원하는 모든곳에서
  모든 클래승의 메서드에서 오브젝트를 가져와서 사용할수 잇다.  --> 싱글톤으로 관리가 된다.
  스캔을 하면 딱한번만 메모리에 오브젝트가 뜨고 그 한번뜬 오브젝트를 공유해서 사용할수 있다.
  이렇게 필요한 곳에서 가져다 쓰는것을 DI라고 한다.
  
  
  
  
